diff --git a/skimage/restoration/_denoise.py b/skimage/restoration/_denoise.py
index 0346eaf..be3392d 100644
--- a/skimage/restoration/_denoise.py
+++ b/skimage/restoration/_denoise.py
@@ -4,7 +4,7 @@ from math import ceil
 from .. import img_as_float
 from ._denoise_cy import _denoise_bilateral, _denoise_tv_bregman
 from .._shared.utils import warn
-import pywt
+#import pywt
 import skimage.color as color
 from skimage.color.colorconv import ycbcr_from_rgb
 import numbers
@@ -576,7 +576,7 @@ def _wavelet_threshold(image, wavelet, method=None, threshold=None,
     .. [2] D. L. Donoho and I. M. Johnstone. "Ideal spatial adaptation
            by wavelet shrinkage." Biometrika 81.3 (1994): 425-455.
            :DOI:`10.1093/biomet/81.3.425`
-    """
+    
     wavelet = pywt.Wavelet(wavelet)
     if not wavelet.orthogonal:
         warn(("Wavelet thresholding was designed for use with orthogonal "
@@ -638,7 +638,8 @@ def _wavelet_threshold(image, wavelet, method=None, threshold=None,
                            for thresh, level in zip(threshold, dcoeffs)]
     denoised_coeffs = [coeffs[0]] + denoised_detail
     return pywt.waverecn(denoised_coeffs, wavelet)[original_extent]
-
+"""
+    return ImportError("PYWT is not supported on Biolib")
 
 def _scale_sigma_and_image_consistently(image, sigma, multichannel,
                                         rescale_sigma):
@@ -917,7 +918,7 @@ def estimate_sigma(image, average_sigmas=False, multichannel=False):
     >>> sigma = 0.1
     >>> img = img + sigma * np.random.standard_normal(img.shape)
     >>> sigma_hat = estimate_sigma(img, multichannel=False)
-    """
+    
     if multichannel:
         nchannels = image.shape[-1]
         sigmas = [estimate_sigma(
@@ -933,3 +934,5 @@ def estimate_sigma(image, average_sigmas=False, multichannel=False):
     coeffs = pywt.dwtn(image, wavelet='db2')
     detail_coeffs = coeffs['d' * image.ndim]
     return _sigma_est_dwt(detail_coeffs, distribution='Gaussian')
+    """
+    return ImportError("PYWT is not supported on Biolib")
